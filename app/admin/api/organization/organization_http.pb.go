// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             (unknown)
// source: api/organization/organization.proto

package organization

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOrganizationCreateOrganization = "/atreus.organization.Organization/CreateOrganization"
const OperationOrganizationDeleteOrganization = "/atreus.organization.Organization/DeleteOrganization"
const OperationOrganizationListOrganization = "/atreus.organization.Organization/ListOrganization"
const OperationOrganizationOrganizationTree = "/atreus.organization.Organization/OrganizationTree"
const OperationOrganizationQueryOrganization = "/atreus.organization.Organization/QueryOrganization"
const OperationOrganizationUpdateOrganization = "/atreus.organization.Organization/UpdateOrganization"

type OrganizationHTTPServer interface {
	// CreateOrganization 创建组织
	CreateOrganization(context.Context, *SysOrganization) (*SysOrganization, error)
	// DeleteOrganization 删除组织
	DeleteOrganization(context.Context, *SysOrganization) (*SysOrganization, error)
	// ListOrganization 获取所有组织
	ListOrganization(context.Context, *SysOrganization) (*ListSysOrganization, error)
	// OrganizationTree 获取组织树
	OrganizationTree(context.Context, *SysOrganization) (*ListSysOrganization, error)
	// QueryOrganization 查询组织
	QueryOrganization(context.Context, *SysOrganization) (*SysOrganization, error)
	// UpdateOrganization 更新组织
	UpdateOrganization(context.Context, *SysOrganization) (*SysOrganization, error)
}

func RegisterOrganizationHTTPServer(s *http.Server, srv OrganizationHTTPServer) {
	r := s.Route("/")
	r.POST("/system/organization/create", _Organization_CreateOrganization0_HTTP_Handler(srv))
	r.GET("/system/organization/query", _Organization_QueryOrganization0_HTTP_Handler(srv))
	r.POST("/system/organization/update", _Organization_UpdateOrganization0_HTTP_Handler(srv))
	r.DELETE("/system/organization/delete", _Organization_DeleteOrganization0_HTTP_Handler(srv))
	r.POST("/system/organization/list", _Organization_ListOrganization0_HTTP_Handler(srv))
	r.POST("/system/organization/tree", _Organization_OrganizationTree0_HTTP_Handler(srv))
}

func _Organization_CreateOrganization0_HTTP_Handler(srv OrganizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysOrganization
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationCreateOrganization)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrganization(ctx, req.(*SysOrganization))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysOrganization)
		return ctx.Result(200, reply)
	}
}

func _Organization_QueryOrganization0_HTTP_Handler(srv OrganizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysOrganization
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationQueryOrganization)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QueryOrganization(ctx, req.(*SysOrganization))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysOrganization)
		return ctx.Result(200, reply)
	}
}

func _Organization_UpdateOrganization0_HTTP_Handler(srv OrganizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysOrganization
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationUpdateOrganization)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOrganization(ctx, req.(*SysOrganization))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysOrganization)
		return ctx.Result(200, reply)
	}
}

func _Organization_DeleteOrganization0_HTTP_Handler(srv OrganizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysOrganization
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationDeleteOrganization)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOrganization(ctx, req.(*SysOrganization))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysOrganization)
		return ctx.Result(200, reply)
	}
}

func _Organization_ListOrganization0_HTTP_Handler(srv OrganizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysOrganization
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationListOrganization)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOrganization(ctx, req.(*SysOrganization))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSysOrganization)
		return ctx.Result(200, reply)
	}
}

func _Organization_OrganizationTree0_HTTP_Handler(srv OrganizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysOrganization
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationOrganizationTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrganizationTree(ctx, req.(*SysOrganization))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSysOrganization)
		return ctx.Result(200, reply)
	}
}

type OrganizationHTTPClient interface {
	CreateOrganization(ctx context.Context, req *SysOrganization, opts ...http.CallOption) (rsp *SysOrganization, err error)
	DeleteOrganization(ctx context.Context, req *SysOrganization, opts ...http.CallOption) (rsp *SysOrganization, err error)
	ListOrganization(ctx context.Context, req *SysOrganization, opts ...http.CallOption) (rsp *ListSysOrganization, err error)
	OrganizationTree(ctx context.Context, req *SysOrganization, opts ...http.CallOption) (rsp *ListSysOrganization, err error)
	QueryOrganization(ctx context.Context, req *SysOrganization, opts ...http.CallOption) (rsp *SysOrganization, err error)
	UpdateOrganization(ctx context.Context, req *SysOrganization, opts ...http.CallOption) (rsp *SysOrganization, err error)
}

type OrganizationHTTPClientImpl struct {
	cc *http.Client
}

func NewOrganizationHTTPClient(client *http.Client) OrganizationHTTPClient {
	return &OrganizationHTTPClientImpl{client}
}

func (c *OrganizationHTTPClientImpl) CreateOrganization(ctx context.Context, in *SysOrganization, opts ...http.CallOption) (*SysOrganization, error) {
	var out SysOrganization
	pattern := "/system/organization/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrganizationCreateOrganization))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrganizationHTTPClientImpl) DeleteOrganization(ctx context.Context, in *SysOrganization, opts ...http.CallOption) (*SysOrganization, error) {
	var out SysOrganization
	pattern := "/system/organization/delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrganizationDeleteOrganization))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrganizationHTTPClientImpl) ListOrganization(ctx context.Context, in *SysOrganization, opts ...http.CallOption) (*ListSysOrganization, error) {
	var out ListSysOrganization
	pattern := "/system/organization/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrganizationListOrganization))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrganizationHTTPClientImpl) OrganizationTree(ctx context.Context, in *SysOrganization, opts ...http.CallOption) (*ListSysOrganization, error) {
	var out ListSysOrganization
	pattern := "/system/organization/tree"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrganizationOrganizationTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrganizationHTTPClientImpl) QueryOrganization(ctx context.Context, in *SysOrganization, opts ...http.CallOption) (*SysOrganization, error) {
	var out SysOrganization
	pattern := "/system/organization/query"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrganizationQueryOrganization))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrganizationHTTPClientImpl) UpdateOrganization(ctx context.Context, in *SysOrganization, opts ...http.CallOption) (*SysOrganization, error) {
	var out SysOrganization
	pattern := "/system/organization/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrganizationUpdateOrganization))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
