// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/role/role.proto

package role

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Role_CreateSysRole_FullMethodName = "/atreus.role.Role/CreateSysRole"
	Role_Update_FullMethodName        = "/atreus.role.Role/Update"
	Role_Delete_FullMethodName        = "/atreus.role.Role/Delete"
	Role_Get_FullMethodName           = "/atreus.role.Role/Get"
	Role_List_FullMethodName          = "/atreus.role.Role/List"
)

// RoleClient is the client API for Role service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleClient interface {
	// 创建角色
	CreateSysRole(ctx context.Context, in *SysRole, opts ...grpc.CallOption) (*SysRole, error)
	// 更新角色
	Update(ctx context.Context, in *SysRole, opts ...grpc.CallOption) (*SysRole, error)
	// 删除角色
	Delete(ctx context.Context, in *SysRole, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取角色
	Get(ctx context.Context, in *SysRole, opts ...grpc.CallOption) (*SysRole, error)
	// 获取角色列表
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListRole, error)
}

type roleClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleClient(cc grpc.ClientConnInterface) RoleClient {
	return &roleClient{cc}
}

func (c *roleClient) CreateSysRole(ctx context.Context, in *SysRole, opts ...grpc.CallOption) (*SysRole, error) {
	out := new(SysRole)
	err := c.cc.Invoke(ctx, Role_CreateSysRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) Update(ctx context.Context, in *SysRole, opts ...grpc.CallOption) (*SysRole, error) {
	out := new(SysRole)
	err := c.cc.Invoke(ctx, Role_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) Delete(ctx context.Context, in *SysRole, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Role_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) Get(ctx context.Context, in *SysRole, opts ...grpc.CallOption) (*SysRole, error) {
	out := new(SysRole)
	err := c.cc.Invoke(ctx, Role_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListRole, error) {
	out := new(ListRole)
	err := c.cc.Invoke(ctx, Role_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServer is the server API for Role service.
// All implementations should embed UnimplementedRoleServer
// for forward compatibility
type RoleServer interface {
	// 创建角色
	CreateSysRole(context.Context, *SysRole) (*SysRole, error)
	// 更新角色
	Update(context.Context, *SysRole) (*SysRole, error)
	// 删除角色
	Delete(context.Context, *SysRole) (*emptypb.Empty, error)
	// 获取角色
	Get(context.Context, *SysRole) (*SysRole, error)
	// 获取角色列表
	List(context.Context, *emptypb.Empty) (*ListRole, error)
}

// UnimplementedRoleServer should be embedded to have forward compatible implementations.
type UnimplementedRoleServer struct {
}

func (UnimplementedRoleServer) CreateSysRole(context.Context, *SysRole) (*SysRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysRole not implemented")
}
func (UnimplementedRoleServer) Update(context.Context, *SysRole) (*SysRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRoleServer) Delete(context.Context, *SysRole) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRoleServer) Get(context.Context, *SysRole) (*SysRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRoleServer) List(context.Context, *emptypb.Empty) (*ListRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeRoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServer will
// result in compilation errors.
type UnsafeRoleServer interface {
	mustEmbedUnimplementedRoleServer()
}

func RegisterRoleServer(s grpc.ServiceRegistrar, srv RoleServer) {
	s.RegisterService(&Role_ServiceDesc, srv)
}

func _Role_CreateSysRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).CreateSysRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Role_CreateSysRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).CreateSysRole(ctx, req.(*SysRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Role_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).Update(ctx, req.(*SysRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Role_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).Delete(ctx, req.(*SysRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Role_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).Get(ctx, req.(*SysRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Role_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Role_ServiceDesc is the grpc.ServiceDesc for Role service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Role_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "atreus.role.Role",
	HandlerType: (*RoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSysRole",
			Handler:    _Role_CreateSysRole_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Role_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Role_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Role_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Role_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/role/role.proto",
}
