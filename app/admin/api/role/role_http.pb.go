// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             (unknown)
// source: api/role/role.proto

package role

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRoleCreateSysRole = "/atreus.role.Role/CreateSysRole"
const OperationRoleDelete = "/atreus.role.Role/Delete"
const OperationRoleGet = "/atreus.role.Role/Get"
const OperationRoleList = "/atreus.role.Role/List"
const OperationRoleUpdate = "/atreus.role.Role/Update"

type RoleHTTPServer interface {
	// CreateSysRole 创建角色
	CreateSysRole(context.Context, *SysRole) (*SysRole, error)
	// Delete 删除角色
	Delete(context.Context, *SysRole) (*emptypb.Empty, error)
	// Get 获取角色
	Get(context.Context, *SysRole) (*SysRole, error)
	// List 获取角色列表
	List(context.Context, *emptypb.Empty) (*ListRole, error)
	// Update 更新角色
	Update(context.Context, *SysRole) (*SysRole, error)
}

func RegisterRoleHTTPServer(s *http.Server, srv RoleHTTPServer) {
	r := s.Route("/")
	r.POST("/system/role/create", _Role_CreateSysRole0_HTTP_Handler(srv))
	r.PUT("/system/role/update", _Role_Update0_HTTP_Handler(srv))
	r.DELETE("/system/role/delete", _Role_Delete0_HTTP_Handler(srv))
	r.GET("/system/role/get", _Role_Get0_HTTP_Handler(srv))
	r.POST("/system/role/list", _Role_List0_HTTP_Handler(srv))
}

func _Role_CreateSysRole0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRole
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleCreateSysRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSysRole(ctx, req.(*SysRole))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRole)
		return ctx.Result(200, reply)
	}
}

func _Role_Update0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRole
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*SysRole))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRole)
		return ctx.Result(200, reply)
	}
}

func _Role_Delete0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRole
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*SysRole))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Role_Get0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRole
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*SysRole))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRole)
		return ctx.Result(200, reply)
	}
}

func _Role_List0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRole)
		return ctx.Result(200, reply)
	}
}

type RoleHTTPClient interface {
	CreateSysRole(ctx context.Context, req *SysRole, opts ...http.CallOption) (rsp *SysRole, err error)
	Delete(ctx context.Context, req *SysRole, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Get(ctx context.Context, req *SysRole, opts ...http.CallOption) (rsp *SysRole, err error)
	List(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ListRole, err error)
	Update(ctx context.Context, req *SysRole, opts ...http.CallOption) (rsp *SysRole, err error)
}

type RoleHTTPClientImpl struct {
	cc *http.Client
}

func NewRoleHTTPClient(client *http.Client) RoleHTTPClient {
	return &RoleHTTPClientImpl{client}
}

func (c *RoleHTTPClientImpl) CreateSysRole(ctx context.Context, in *SysRole, opts ...http.CallOption) (*SysRole, error) {
	var out SysRole
	pattern := "/system/role/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleCreateSysRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleHTTPClientImpl) Delete(ctx context.Context, in *SysRole, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/system/role/delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleHTTPClientImpl) Get(ctx context.Context, in *SysRole, opts ...http.CallOption) (*SysRole, error) {
	var out SysRole
	pattern := "/system/role/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleHTTPClientImpl) List(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ListRole, error) {
	var out ListRole
	pattern := "/system/role/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleHTTPClientImpl) Update(ctx context.Context, in *SysRole, opts ...http.CallOption) (*SysRole, error) {
	var out SysRole
	pattern := "/system/role/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
